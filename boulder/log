   Compiling hir v0.1.0 (/home/programming/computer/boulder/hir)
warning: unused import: `HashSet`
 --> hir/src/ty/solver/mod.rs:1:33
  |
1 | use std::collections::{HashMap, HashSet};
  |                                 ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `expr`
   --> hir/src/expression.rs:456:41
    |
456 |             Expression::TypeRestriction(expr, ()) => unreachable!("type restriction after type check")
    |                                         ^^^^ help: consider prefixing with an underscore: `_expr`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `bounds`
   --> hir/src/ty/solver/mod.rs:179:31
    |
179 |         if let Some(&(id, ref bounds)) = self.fields.get(&name.item) {
    |                               ^^^^^^ help: consider prefixing with an underscore: `_bounds`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `f`
  --> hir/src/ty/solver/productions.rs:61:88
   |
61 |             let allowed_objects = EntityState::Bound(self.field_types.iter().map(|&(o, f)| o).collect());
   |                                                                                        ^ help: consider prefixing with an underscore: `_f`

   Compiling parse v0.1.0 (/home/programming/computer/boulder/parse)
   Compiling boulder v0.1.0 (/home/programming/computer/boulder/boulder)
    Finished dev [unoptimized + debuginfo] target(s) in 2.33s
     Running `target/debug/boulder boulder/tests/compile_fail/type/invalid_field.bo`
[solver/src/lib.rs:170] &self = ConstraintSolver {
    entities: [
        Bound(
            [
                TypeId(
                    5,
                ),
            ],
        ),
        Bound(
            [
                TypeId(
                    4,
                ),
            ],
        ),
        Unbound,
        Unbound,
    ],
    rules: [
        [
            ForwardProduction(
                ProductionId(
                    1,
                ),
                EntityId(
                    0,
                ),
                EntityId(
                    2,
                ),
            ),
        ],
        [
            BackwardsProduction(
                ProductionId(
                    2,
                ),
                EntityId(
                    3,
                ),
                EntityId(
                    1,
                ),
            ),
        ],
        [
            BackwardsProduction(
                ProductionId(
                    1,
                ),
                EntityId(
                    0,
                ),
                EntityId(
                    2,
                ),
            ),
            ForwardProduction(
                ProductionId(
                    0,
                ),
                EntityId(
                    2,
                ),
                EntityId(
                    3,
                ),
            ),
        ],
        [
            BackwardsProduction(
                ProductionId(
                    0,
                ),
                EntityId(
                    2,
                ),
                EntityId(
                    3,
                ),
            ),
            ForwardProduction(
                ProductionId(
                    2,
                ),
                EntityId(
                    3,
                ),
                EntityId(
                    1,
                ),
            ),
        ],
    ],
    context: Context {
        types: [
            Type {
                name: Meta {
                    item: "Empty",
                    span: "",
                    line: 0,
                },
                kind: Unit,
            },
            Type {
                name: Meta {
                    item: "Never",
                    span: "",
                    line: 0,
                },
                kind: Uninhabited,
            },
            Type {
                name: Meta {
                    item: "u8",
                    span: "",
                    line: 0,
                },
                kind: U8,
            },
            Type {
                name: Meta {
                    item: "u16",
                    span: "",
                    line: 0,
                },
                kind: U16,
            },
            Type {
                name: Meta {
                    item: "u32",
                    span: "",
                    line: 0,
                },
                kind: U32,
            },
            Type {
                name: Meta {
                    item: "A",
                    span: "A",
                    line: 6,
                },
                kind: Struct(
                    [
                        Field {
                            name: Meta {
                                item: "b",
                                span: "b",
                                line: 7,
                            },
                            ty: Meta {
                                item: TypeId(
                                    3,
                                ),
                                span: "u16",
                                line: 7,
                            },
                        },
                    ],
                ),
            },
        ],
        type_lookup: {
            "Never": TypeId(
                1,
            ),
            "u8": TypeId(
                2,
            ),
            "Empty": TypeId(
                0,
            ),
            "u32": TypeId(
                4,
            ),
            "u16": TypeId(
                3,
            ),
            "A": TypeId(
                5,
            ),
        },
        meta: {
            EntityId(
                3,
            ): Meta {
                item: (),
                span: "b",
                line: 11,
            },
            EntityId(
                1,
            ): Meta {
                item: (),
                span: "u32",
                line: 10,
            },
            EntityId(
                0,
            ): Meta {
                item: (),
                span: "A",
                line: 10,
            },
            EntityId(
                2,
            ): Meta {
                item: (),
                span: "a",
                line: 11,
            },
        },
    },
    productions: [
        FieldAccess {
            field_name: "b",
            field_types: [
                (
                    TypeId(
                        5,
                    ),
                    TypeId(
                        3,
                    ),
                ),
            ],
        },
        Equality,
        Extension,
    ],
}
[ERROR]: Mismatched types: found `u16`, expected `u32`
(10:17): fn test(a: A) -> u32 {
                          ^^^
(11:6):     a.b
              ^
Unable to compile `boulder/tests/compile_fail/type/invalid_field.bo`
