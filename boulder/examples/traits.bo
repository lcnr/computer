//! a system to implement traits without requiring language support

use std::collections::HashMap;
use std::compile;

const IMPL_MAP: type = HashMap((type, type, type), fn(type, type) -> type);

const IMPLEMENTATIONS: IMPL_MAP = IMPL_MAP::new();

pub fn implement_add(
    const RHS: type,
    const LHS: type,
    const OUT: type,
    f: fn(RHS, LHS) -> OUT,
) {
    if IMPLEMENTATIONS.contains((RHS, LHS, OUT)) {
        compile.error("found multiple implementations of `add` with the types `(RHS, LHS, OUT) = ({}, {}, {})`", RHS.name, LHS.name, OUT.name);
    } else {
        IMPLEMENTATIONS.insert((RHS, LHS, OUT), f);
    }
}

pub fn add(
    const RHS: type,
    const LHS: type,
    const OUT: type,
    rhs: RHS,
    lhs: LHS
) -> OUT {
    match f = IMPLEMENTATIONS.get((RHS, LHS, OUT)) {
        fn(RHS, LHS) -> OUT => f(rhs, lhs),
        None => compile.error("add with the types `(RHS, LHS, OUT) = ({}, {}, {})` is not implemented", RHS.name, LHS.name, OUT.name),
    }
}