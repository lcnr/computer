fn bitand_int(a: u32, b: u32) -> u32 {
    a & b + 4;
    3 + b & a
}

fn bitand_bool(a: Bool, b: True) -> Bool {
    a & b
}

fn bitand_bool2(a: False, b: True) -> Bool {
    a & b
}

@test
fn int_test() -> Bool {
    bitand_int(6, 7) == 2
}

@test
fn bool_true() -> Bool {
    bitand_bool(True, True)
}

@test
fn bool_false() -> Bool {
    let a: Bool = bitand_bool(False, True);
    dbg(a);
    !a
}

@test
fn bool2() -> Bool {
    !bitand_bool2(False, True)
}