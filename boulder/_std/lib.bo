@lang_item(div32)
fn divide32(a: u32, b: u32) -> u32 {
    let i = 0;
    let new_b: u32 = b;
    while new_b << 1 > new_b {
        i = i + 1;
        new_b = new_b << 1;
    };
    i = i + 1;

    let result = 0;
    while i > 0 {
        i = i - 1;
        if (b << i) - 1 < a {
            a = a - (b << i);
            result = result | (1 << i);
        }: Empty;
    };

    result
}

@lang_item(div16)
fn divide16(a: u16, b: u16) -> u16 {
    let i = 0;
    let new_b: u16 = b;
    while new_b << 1 > new_b {
        i = i + 1;
        new_b = new_b << 1;
    };
    i = i + 1;

    let result = 0;
    while i > 0 {
        i = i - 1;
        if (b << i) - 1 < a {
            a = a - (b << i);
            result = result | (1 << i);
        }: Empty;
    };

    result
}

@lang_item(div8)
fn divide8(a: u8, b: u8) -> u8 {
    let i = 0;
    let new_b: u8 = b;
    while new_b << 1 > new_b {
        i = i + 1;
        new_b = new_b << 1;
    };
    i = i + 1;

    let result = 0;
    while i > 0 {
        i = i - 1;
        if (b << i) - 1 < a {
            a = a - (b << i);
            result = result | (1 << i);
        }: Empty;
    };

    result
}

@lang_item(rem32)
fn remainder32(a: u32, b: u32) -> u32 {
    let i = 0;
    let new_b: u32 = b;
    while new_b << 1 > new_b {
        i = i + 1;
        new_b = new_b << 1;
    };
    i = i + 1;

    while i > 0 {
        i = i - 1;
        if (b << i) - 1 < a {
            a = a - (b << i);
        }: Empty;
    };

    a
}


@lang_item(rem16)
fn remainder16(a: u16, b: u16) -> u16 {
    let i = 0;
    let new_b: u16 = b;
    while new_b << 1 > new_b {
        i = i + 1;
        new_b = new_b << 1;
    };
    i = i + 1;

    while i > 0 {
        i = i - 1;
        if (b << i) - 1 < a {
            a = a - (b << i);
        }: Empty;
    };

    a
}

@lang_item(rem8)
fn remainder8(a: u8, b: u8) -> u8 {
    let i = 0;
    let new_b: u8 = b;
    while new_b << 1 > new_b {
        i = i + 1;
        new_b = new_b << 1;
    };
    i = i + 1;

    while i > 0 {
        i = i - 1;
        if (b << i) - 1 < a {
            a = a - (b << i);
        }: Empty;
    };

    a
}

@lang_item(mul32)
fn multiply32(a: u32, b: u32) -> u32 {
    let result = 0;
    let curr = 0;
    while curr < 32 {
        if b & (1 << curr) != 0 {
            result = result + (a << curr);
        }: Empty;
        curr = curr + 1;
    }: Empty;

    result
}

@lang_item(mul16)
fn multiply16(a: u16, b: u16) -> u16 {
    let result = 0;
    let curr = 0;
    while curr < 16 {
        if b & (1 << curr) != 0 {
            result = result + (a << curr);
        }: Empty;
        curr = curr + 1;
    }: Empty;

    result
}

@lang_item(mul8)
fn multiply8(a: u8, b: u8) -> u8 {
    let result = 0;
    let curr = 0;
    while curr < 8 {
        if b & (1 << curr) != 0 {
            result = result + (a << curr);
        }: Empty;
        curr = curr + 1;
    }: Empty;

    result
}