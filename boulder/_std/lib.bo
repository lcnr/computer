@hidden
fn bool_to_u8(b: Bool) -> u8 {
    match b {
        _: True -> 1,
        _: False -> 0,
    }
}

struct OverflowingByte {
    value: u8,
    overflow: Bool
}

@hidden
fn overflowing_add(l: u8, r: u8, carry_in: Bool) -> OverflowingByte {
    let mask: u8 = 0b1000_0000;

    let value = (l & !mask) + (r & !mask) + bool_to_u8(carry_in);

    let r: u8 = (l >> 7) + (r >> 7);

    let overflow: Bool = if r == 2 {
        True
    } else {
        if r == 1 {
            if value & mask != 0 {
                value = value & !mask;
                True
            } else {
                value = value + mask;
                False
            }: Bool
        } else {
            False
        }: Bool
    };

    OverflowingByte {
        value: value,
        overflow: overflow,
    }
}

@lang_item(add32)
fn add32(l: u32, r: u32) -> u32 {
    let l_bytes: u32Bytes = to_bytes(l);
    let r_bytes: u32Bytes = to_bytes(r);

    let a: OverflowingByte = overflowing_add(l_bytes.a, r_bytes.a, False);
    let b: OverflowingByte = overflowing_add(l_bytes.b, r_bytes.b, a.overflow);
    let c: OverflowingByte = overflowing_add(l_bytes.c, r_bytes.c, b.overflow);
    let d: u8 = l_bytes.d + r_bytes.d + bool_to_u8(c.overflow);

    from_bytes(u32Bytes {
        a: a.value,
        b: b.value,
        c: c.value,
        d: d,
    })
}

@hidden
@lang_item(add16)
fn add16(l: u16, r: u16) -> u16 {
    let l_bytes: u16Bytes = to_bytes(l);
    let r_bytes: u16Bytes = to_bytes(r);

    let a: OverflowingByte = overflowing_add(l_bytes.a, r_bytes.a, False);
    let b: u8 = l_bytes.b + r_bytes.b + bool_to_u8(a.overflow);
    
    from_bytes(u16Bytes {
        a: a.value,
        b: b,
    })
}

@hidden
@lang_item(sub32)
fn sub32(l: u32, r: u32) -> u32 {
    let l_bytes: u32Bytes = to_bytes(l);
    let r_bytes: u32Bytes = to_bytes(r);

    let a: OverflowingByte = overflowing_add(l_bytes.a, !r_bytes.a, True);
    let b: OverflowingByte = overflowing_add(l_bytes.b, !r_bytes.b, a.overflow);
    let c: OverflowingByte = overflowing_add(l_bytes.c, !r_bytes.c, b.overflow);
    let d: OverflowingByte = overflowing_add(l_bytes.d, !r_bytes.d, c.overflow);

    from_bytes(u32Bytes {
        a: a.value,
        b: b.value,
        c: c.value,
        d: d.value,
    })
}

@hidden
@lang_item(sub16)
fn sub16(l: u16, r: u16) -> u16 {
    let l_bytes: u16Bytes = to_bytes(l);
    let r_bytes: u16Bytes = to_bytes(r);

    let a: OverflowingByte = overflowing_add(l_bytes.a, !r_bytes.a, True);
    let b: OverflowingByte = overflowing_add(l_bytes.b, !r_bytes.b, a.overflow);
    
    from_bytes(u16Bytes {
        a: a.value,
        b: b.value,
    })
}

@hidden
@lang_item(shl32)
fn shl32(l: u32, r: u32) -> u32 {
    let l_bytes: u32Bytes = to_bytes(l);
    let r_bytes: u32Bytes = to_bytes(r);

    if r_bytes.a >= 32 || r_bytes.b != 0 || r_bytes.c != 0 || r_bytes.d != 0 {
        0
    } else {
        let shift = r_bytes.a % 8;

        let a_shift = l_bytes.a << shift;
        if r_bytes.a < 24 {
            let inv_shift = 8 - shift;
            let b_shift = (l_bytes.a >> inv_shift) + (l_bytes.b << shift);
            if r_bytes.a < 16 {
                let c_shift = (l_bytes.b >> inv_shift) + (l_bytes.c << shift);
                if r_bytes.a < 8 {
                    let d_shift = (l_bytes.c >> inv_shift) + (l_bytes.d << shift);
                    from_bytes(u32Bytes {
                        a: a_shift,
                        b: b_shift,
                        c: c_shift,
                        d: d_shift,
                    })
                } else {
                    from_bytes(u32Bytes {
                        a: 0,
                        b: a_shift,
                        c: b_shift,
                        d: c_shift,
                    })
                }
            } else {
                from_bytes(u32Bytes {
                    a: 0,
                    b: 0,
                    c: a_shift,
                    d: b_shift,
                })
            }
        } else {
            from_bytes(u32Bytes {
                a: 0,
                b: 0,
                c: 0,
                d: a_shift,
            })
        }
    }
}

@hidden
@lang_item(shl16)
fn shl16(l: u16, r: u16) -> u16 {
    let l_bytes: u16Bytes = to_bytes(l);
    let r_bytes: u16Bytes = to_bytes(r);

    if r_bytes.a >= 16 || r_bytes.b != 0 {
        0
    } else {
        let shift = r_bytes.a % 8;

        let a_shift = l_bytes.a << shift;
        if r_bytes.a < 8 {
            let b_shift = (l_bytes.a >> 8 - shift) + (l_bytes.b << shift);

            from_bytes(u16Bytes {
                a: a_shift,
                b: b_shift,
            })
        } else {
            from_bytes(u16Bytes {
                a: 0,
                b: a_shift,
            })
        }
    }
}

@hidden
@lang_item(shr32)
fn shr32(l: u32, r: u32) -> u32 {
    let l_bytes: u32Bytes = to_bytes(l);
    let r_bytes: u32Bytes = to_bytes(r);

    if r >= 32 {
        r
    } else {
        let shift = r_bytes.a % 8;

        let d_shift = l_bytes.d >> shift;
        if r_bytes.a < 24 {
            let inv_shift = 8 - shift;
            let c_shift = (l_bytes.d << inv_shift) + (l_bytes.c >> shift);
            if r_bytes.a < 16 {
                let b_shift = (l_bytes.c << inv_shift) + (l_bytes.b >> shift);
                if r_bytes.a < 8 {
                    let a_shift = (l_bytes.b << inv_shift) + (l_bytes.a >> shift);
                    from_bytes(u32Bytes {
                        a: a_shift,
                        b: b_shift,
                        c: c_shift,
                        d: d_shift,
                    })
                } else {
                    from_bytes(u32Bytes {
                        a: b_shift,
                        b: c_shift,
                        c: d_shift,
                        d: 0,
                    })
                }
            } else {
                from_bytes(u32Bytes {
                    a: c_shift,
                    b: d_shift,
                    c: 0,
                    d: 0,
                })
            }
        } else {
            from_bytes(u32Bytes {
                a: d_shift,
                b: 0,
                c: 0,
                d: 0,
            })
        }
    }
}

@hidden
@lang_item(shr16)
fn shr16(l: u16, r: u16) -> u16 {
    let l_bytes: u16Bytes = to_bytes(l);
    let r_bytes: u16Bytes = to_bytes(r);

    if r_bytes.a >= 16 || r_bytes.b != 0 {
        0
    } else {
        let shift = r_bytes.a % 8;

        let b_shift = l_bytes.b >> shift;
        if r_bytes.a < 8 {
            let a_shift = (l_bytes.b << 8 - shift) + (l_bytes.a >> shift);
            
            from_bytes(u16Bytes {
                a: a_shift,
                b: b_shift,
            })
        } else {
            from_bytes(u16Bytes {
                a: b_shift,
                b: 0,
            })
        }
    }
}

@hidden
@lang_item(gt32)
fn gt32(l: u32, r: u32) -> Bool {
    let l_bytes: u32Bytes = to_bytes(l);
    let r_bytes: u32Bytes = to_bytes(r);

    if l_bytes.d > r_bytes.d {
        True: Bool
    } else {
        if l_bytes.d < r_bytes.d {
            return False;
        }: Empty;

        if l_bytes.c > r_bytes.c {
            True
        } else {
            if l_bytes.c < r_bytes.c {
                return False;
            }: Empty;

            if l_bytes.b > r_bytes.b {
                True
            } else {
                if l_bytes.b < r_bytes.b {
                    return False;
                }: Empty;

                if l_bytes.a > r_bytes.a {
                    True
                } else {
                    False
                }: Bool
            }: Bool
        }: Bool
    }
}

@hidden
@lang_item(gt16)
fn gt16(l: u16, r: u16) -> Bool {
    let l_bytes: u16Bytes = to_bytes(l);
    let r_bytes: u16Bytes = to_bytes(r);

    if l_bytes.b > r_bytes.b {
        True
    } else {
        if l_bytes.b < r_bytes.b {
            return False;
        }: Empty;

        if l_bytes.a > r_bytes.a {
            True
        } else {
            False
        }: Bool
    }
}

@hidden
@lang_item(gte32)
fn gte32(l: u32, r: u32) -> Bool {
    let l_bytes: u32Bytes = to_bytes(l);
    let r_bytes: u32Bytes = to_bytes(r);

    if l_bytes.d > r_bytes.d {
        True
    } else {
        if l_bytes.d < r_bytes.d {
            return False;
        }: Empty;

        if l_bytes.c > r_bytes.c {
            True
        } else {
            if l_bytes.c < r_bytes.c {
                return False;
            }: Empty;

            if l_bytes.b > r_bytes.b {
                True
            } else {
                if l_bytes.b < r_bytes.b {
                    return False;
                }: Empty;

                if l_bytes.a >= r_bytes.a {
                    True
                } else {
                    False
                }: Bool
            }: Bool
        }: Bool
    }
}

@hidden
@lang_item(gte16)
fn gte16(l: u16, r: u16) -> Bool {
    let l_bytes: u16Bytes = to_bytes(l);
    let r_bytes: u16Bytes = to_bytes(r);

    if l_bytes.b > r_bytes.b {
        True
    } else {
        if l_bytes.b < r_bytes.b {
            return False;
        }: Empty;

        if l_bytes.a >= r_bytes.a {
            True
        } else {
            False
        }: Bool
    }
}

@hidden
@lang_item(div32)
fn div32(a: u32, b: u32) -> u32 {
    let i = 0;
    let new_b: u32 = b;
    while new_b << 1 > new_b {
        i = i + 1;
        new_b = new_b << 1;
    };
    i = i + 1;

    let result = 0;
    while i > 0 {
        i = i - 1;
        if (b << i) - 1 < a {
            a = a - (b << i);
            result = result | (1 << i);
        }: Empty;
    };

    result
}

@hidden
@lang_item(div16)
fn div16(a: u16, b: u16) -> u16 {
    let i = 0;
    let new_b: u16 = b;
    while new_b << 1 > new_b {
        i = i + 1;
        new_b = new_b << 1;
    };
    i = i + 1;

    let result = 0;
    while i > 0 {
        i = i - 1;
        if (b << i) - 1 < a {
            a = a - (b << i);
            result = result | (1 << i);
        }: Empty;
    };

    result
}

@hidden
@lang_item(div8)
fn div8(a: u8, b: u8) -> u8 {
    let i = 0;
    let new_b: u8 = b;
    while new_b << 1 > new_b {
        i = i + 1;
        new_b = new_b << 1;
    };
    i = i + 1;

    let result = 0;
    while i > 0 {
        i = i - 1;
        if (b << i) - 1 < a {
            a = a - (b << i);
            result = result | (1 << i);
        }: Empty;
    };

    result
}

@hidden
@lang_item(rem32)
fn rem32(a: u32, b: u32) -> u32 {
    let i = 0;
    let new_b: u32 = b;
    while new_b << 1 > new_b {
        i = i + 1;
        new_b = new_b << 1;
    };
    i = i + 1;

    while i > 0 {
        i = i - 1;
        if (b << i) - 1 < a {
            a = a - (b << i);
        }: Empty;
    };

    a
}

@hidden
@lang_item(rem16)
fn rem16(a: u16, b: u16) -> u16 {
    let i = 0;
    let new_b: u16 = b;
    while new_b << 1 > new_b {
        i = i + 1;
        new_b = new_b << 1;
    };
    i = i + 1;

    while i > 0 {
        i = i - 1;
        if (b << i) - 1 < a {
            a = a - (b << i);
        }: Empty;
    };

    a
}

@hidden
@lang_item(rem8)
fn rem8(a: u8, b: u8) -> u8 {
    let i = 0;
    let new_b: u8 = b;
    while new_b << 1 > new_b {
        i = i + 1;
        new_b = new_b << 1;
    };
    i = i + 1;

    while i > 0 {
        i = i - 1;
        if (b << i) - 1 < a {
            a = a - (b << i);
        }: Empty;
    };

    a
}

@hidden
@lang_item(mul32)
fn mul32(a: u32, b: u32) -> u32 {
    let result = 0;
    let curr = 0;
    while curr < 32 {
        if b & (1 << curr) != 0 {
            result = result + (a << curr);
        }: Empty;
        curr = curr + 1;
    }: Empty;

    result
}

@hidden
@lang_item(mul16)
fn mul16(a: u16, b: u16) -> u16 {
    let result = 0;
    let curr = 0;
    while curr < 16 {
        if b & (1 << curr) != 0 {
            result = result + (a << curr);
        }: Empty;
        curr = curr + 1;
    }: Empty;

    result
}

@hidden
@lang_item(mul8)
fn mul8(a: u8, b: u8) -> u8 {
    let result = 0;
    let curr = 0;
    while curr < 8 {
        if b & (1 << curr) != 0 {
            result = result + (a << curr);
        }: Empty;
        curr = curr + 1;
    }: Empty;

    result
}
