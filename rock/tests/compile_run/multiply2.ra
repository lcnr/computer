# stack in M2 = xff; M1 = 0;
start:
    #arbitrary code
    mov 2 C;
    mov 5 D;
    
    # prepare calling multiply
    mov 0xff M2;        # point to stack
    mov 0 M1;
    mov mem A;          # stack length to A

    mov 1 B;            # store return adress byte on the stack
    add M1;
    add A;
    mov .return B;
    mov B mem;
    
    mov 1 B;            # store return adress block on the stack
    add M1;
    add A;
    mov start B;
    mov B mem;
    
    mov 0 M1;           # update stack pointer
    mov A mem;

    ljmp multiply;      # enter multiply function
.return:
    jmp .return;

# calculates D = C * D
# 
# expected stack:
#   - don't care
#   - ret byte
#   - ret block <- stack pointer
#
# returned stack:
#   - don't care <- stack pointer
multiply:
    mov 0xff M2;        # load stack pointer to A
    mov 0 M1;
    mov mem A;

    mov 1 B;            # store D on stack
    add A;
    mov A M1;
    mov D mem;          
    
    mov D A;            # check if C or D is 0
    if z jmp .end;
    mov C A;
    if z jmp .end;

.loop:
    mov C A;            # A = C - 1
    mov 1 B;
    sub A;
    mov A C;            # C = A
    if z jmp .end;      

    mov mem A;          # D = mem + D
    mov D B;
    add D;
    jmp .loop;

.end:
    mov 0 M1;           # load stack pointer
    mov mem A;

    mov 2 B;            # pop return address from stack
    sub mem;

    mov A M1;   
    mov mem C;          # load return block to C

    mov 1 B;            # point mem to return byte
    sub M1;      
    
    ret C mem;          # return
