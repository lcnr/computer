start:
    # after arbitrary code
    mov 12 C;
    mov 15 D;
                    # stack 
    mov 0xff M1;
    mov 0xff M2;
    mov mem B;
    mov 1 A;
    add B;
    mov 0xff A;
    sub M1;
    mov .return A;  # return adress section (P1)
    mov A mem;
    
    mov 1 A;
    add B;
    mov 0xff A;
    sub M1;
    mov start A; #return adress block (P2)
    mov A mem;
    
    mov 1 A; # push variables on stack
    add B;
    mov 0xff A;
    sub M1;
    mov C mem;
    
    mov 1 A;
    add B;
    mov 0xff A;
    sub M1;
    mov D mem;
    mov 0xff M1;
    mov 0xff M2; 
    mov B mem;
    
    ljmp multiply; #function call
    
.return:
jmp .return;

# multiply two variables on top of stack
multiply:
    mov 0xff M1;    #catch variable ##1
    mov 0xff M2;
    mov mem B;
    mov 0xff A;
    sub M1;
    mov mem C;
    
    mov 1 A;        #catch variable ##2
    swap;
    sub A;
    swap;
    mov 0xff A;
    sub M1;
    mov mem D;
    
    mov C A;
    if z jmp .end;
    mov D A;
    if z jmp .end;
    
.loop:
    mov C A;
    mov 1 B;
    sub A;
    mov A C;
    if z jmp .end;
    
    mov mem A;
    mov D B;
    add D;
    jmp .loop;
    
.end:
    mov 0xff M1;
    mov 0xff M2;
    mov mem A;
    mov 2 B;
    sub A;
    mov A mem;
    mov 0xff A;
    mov mem B;
    sub M1;
    mov mem C;      #block return
    
    mov 0xff M1;
    mov 0xff M2;
    mov mem A;
    mov 1 B;
    sub A;
    mov A mem;
    mov 0xff A;
    mov mem B;
    sub M1;         #section return
    
    mov D A;        #result in A
    ret C mem;
    
