start:
    mov 12 C;
    mov 5 D;
    # push the return addr of the stack
    mov 1 M2;
    mov 0 M1;
    mov Mem A;
    mov A M1;
    mov start B;
    mov B Mem;
    mov 1 B;
    add A;
    mov A M1;
    mov .next_pos B;
    mov B Mem;
    mov 1 B;
    add A;
    mov 0 M1;
    mov Mem A;
.next_pos:
    # the result should now be in A
    jmp .next_pos;


# calculate C * D, storing the result in C
multiply:
    mov 0 B;
.loop:
    mov C A;
    mov B C;
    if z jmp .end;
    mov 1 B;
    sub A;
    mov C B;
    mov A C;
    mov D A;
    add B;
    jmp .loop;
.end:
    # pop the return addr from the stack, jump back
    mov 1 M2;
    mov 0 M1;
    mov Mem A;
    mov 1 B;
    sub A;
    mov A M1;
    mov Mem D;
    sub A;
    mov A M1;
    mov Mem B;
    mov 0 M1; # update stack pointer
    mov A Mem; #not sure
    mov D A;
    mov Mem A;
    ret B A;


